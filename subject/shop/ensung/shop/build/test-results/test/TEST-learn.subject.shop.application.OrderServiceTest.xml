<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="learn.subject.shop.application.OrderServiceTest" tests="2" skipped="0" failures="0" errors="0" timestamp="2025-06-16T07:08:32.293Z" hostname="DESKTOP-8I3SHE8" time="0.529">
  <properties/>
  <testcase name="동시성을 활용하여 주문 제고를 체크한다." classname="learn.subject.shop.application.OrderServiceTest" time="0.516"/>
  <testcase name="수량을 넘은 주문을 했을 경우 예외를 발생한다." classname="learn.subject.shop.application.OrderServiceTest" time="0.012"/>
  <system-out><![CDATA[16:08:28.766 [Test worker] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [learn.subject.shop.application.OrderServiceTest]: OrderServiceTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
16:08:28.863 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration learn.subject.shop.ShopApplication for test class learn.subject.shop.application.OrderServiceTest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.5.0)

2025-06-16T16:08:29.218+09:00  INFO 24164 --- [    Test worker] l.s.shop.application.OrderServiceTest    : Starting OrderServiceTest using Java 21.0.5 with PID 24164 (started by E-trons in C:\eun_workspace\subject_learn\shop)
2025-06-16T16:08:29.220+09:00  INFO 24164 --- [    Test worker] l.s.shop.application.OrderServiceTest    : No active profile set, falling back to 1 default profile: "default"
2025-06-16T16:08:29.693+09:00  INFO 24164 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-16T16:08:29.740+09:00  INFO 24164 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 39 ms. Found 4 JPA repository interfaces.
2025-06-16T16:08:30.035+09:00  INFO 24164 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-16T16:08:30.083+09:00  INFO 24164 --- [    Test worker] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.6.15.Final
2025-06-16T16:08:30.109+09:00  INFO 24164 --- [    Test worker] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-06-16T16:08:30.361+09:00  INFO 24164 --- [    Test worker] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-16T16:08:30.390+09:00  INFO 24164 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-06-16T16:08:30.530+09:00  INFO 24164 --- [    Test worker] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:test user=SA
2025-06-16T16:08:30.531+09:00  INFO 24164 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-06-16T16:08:30.551+09:00  WARN 24164 --- [    Test worker] org.hibernate.orm.deprecation            : HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-16T16:08:30.566+09:00  INFO 24164 --- [    Test worker] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 2.3.232
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-16T16:08:31.193+09:00  INFO 24164 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: drop table if exists member cascade 
Hibernate: drop table if exists order_item cascade 
Hibernate: drop table if exists orders cascade 
Hibernate: drop table if exists product cascade 
Hibernate: create table member (created_at timestamp(6), id bigint generated by default as identity, name varchar(255), primary key (id))
Hibernate: create table order_item (price integer not null, quantity integer not null, created_at timestamp(6), id bigint generated by default as identity, order_id bigint, product_id bigint, primary key (id))
Hibernate: create table orders (quantity integer not null, total_price integer not null, created_at timestamp(6), id bigint generated by default as identity, member_id bigint, order_status enum ('CANCELLED','FINISHED','READY'), primary key (id))
Hibernate: create table product (price integer not null, quantity integer not null, created_at timestamp(6), id bigint generated by default as identity, description varchar(255), name varchar(255), primary key (id))
2025-06-16T16:08:31.223+09:00  INFO 24164 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-16T16:08:31.500+09:00  INFO 24164 --- [    Test worker] o.s.d.j.r.query.QueryEnhancerFactory     : Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-16T16:08:32.003+09:00  WARN 24164 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-16T16:08:32.222+09:00  INFO 24164 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:test'
2025-06-16T16:08:32.283+09:00  INFO 24164 --- [    Test worker] l.s.shop.application.OrderServiceTest    : Started OrderServiceTest in 3.302 seconds (process running for 4.146)
Hibernate: select m1_0.id,m1_0.created_at,m1_0.name from member m1_0 where m1_0.id=?
Hibernate: select m1_0.id,m1_0.created_at,m1_0.name from member m1_0 where m1_0.id=?
Hibernate: select m1_0.id,m1_0.created_at,m1_0.name from member m1_0 where m1_0.id=?
Hibernate: select m1_0.id,m1_0.created_at,m1_0.name from member m1_0 where m1_0.id=?
Hibernate: select m1_0.id,m1_0.created_at,m1_0.name from member m1_0 where m1_0.id=?
Hibernate: select m1_0.id,m1_0.created_at,m1_0.name from member m1_0 where m1_0.id=?
Hibernate: select m1_0.id,m1_0.created_at,m1_0.name from member m1_0 where m1_0.id=?
Hibernate: select m1_0.id,m1_0.created_at,m1_0.name from member m1_0 where m1_0.id=?
Hibernate: select m1_0.id,m1_0.created_at,m1_0.name from member m1_0 where m1_0.id=?
Hibernate: insert into orders (created_at,member_id,order_status,quantity,total_price,id) values (?,?,?,?,?,default)
Hibernate: insert into orders (created_at,member_id,order_status,quantity,total_price,id) values (?,?,?,?,?,default)
Hibernate: insert into orders (created_at,member_id,order_status,quantity,total_price,id) values (?,?,?,?,?,default)
Hibernate: insert into orders (created_at,member_id,order_status,quantity,total_price,id) values (?,?,?,?,?,default)
Hibernate: insert into orders (created_at,member_id,order_status,quantity,total_price,id) values (?,?,?,?,?,default)
Hibernate: insert into orders (created_at,member_id,order_status,quantity,total_price,id) values (?,?,?,?,?,default)
Hibernate: insert into orders (created_at,member_id,order_status,quantity,total_price,id) values (?,?,?,?,?,default)
Hibernate: insert into orders (created_at,member_id,order_status,quantity,total_price,id) values (?,?,?,?,?,default)
Hibernate: insert into orders (created_at,member_id,order_status,quantity,total_price,id) values (?,?,?,?,?,default)
Hibernate: select p1_0.id,p1_0.created_at,p1_0.description,p1_0.name,p1_0.price,p1_0.quantity from product p1_0 where p1_0.id=? for update
Hibernate: select p1_0.id,p1_0.created_at,p1_0.description,p1_0.name,p1_0.price,p1_0.quantity from product p1_0 where p1_0.id=? for update
Hibernate: select p1_0.id,p1_0.created_at,p1_0.description,p1_0.name,p1_0.price,p1_0.quantity from product p1_0 where p1_0.id=? for update
Hibernate: select p1_0.id,p1_0.created_at,p1_0.description,p1_0.name,p1_0.price,p1_0.quantity from product p1_0 where p1_0.id=? for update
Hibernate: select p1_0.id,p1_0.created_at,p1_0.description,p1_0.name,p1_0.price,p1_0.quantity from product p1_0 where p1_0.id=? for update
Hibernate: select p1_0.id,p1_0.created_at,p1_0.description,p1_0.name,p1_0.price,p1_0.quantity from product p1_0 where p1_0.id=? for update
Hibernate: select p1_0.id,p1_0.created_at,p1_0.description,p1_0.name,p1_0.price,p1_0.quantity from product p1_0 where p1_0.id=? for update
Hibernate: select p1_0.id,p1_0.created_at,p1_0.description,p1_0.name,p1_0.price,p1_0.quantity from product p1_0 where p1_0.id=? for update
Hibernate: select p1_0.id,p1_0.created_at,p1_0.description,p1_0.name,p1_0.price,p1_0.quantity from product p1_0 where p1_0.id=? for update
Hibernate: insert into order_item (created_at,order_id,price,product_id,quantity,id) values (?,?,?,?,?,default)
Hibernate: update orders set created_at=?,member_id=?,order_status=?,quantity=?,total_price=? where id=?
Hibernate: update product set created_at=?,description=?,name=?,price=?,quantity=? where id=?
Hibernate: insert into order_item (created_at,order_id,price,product_id,quantity,id) values (?,?,?,?,?,default)
Hibernate: select m1_0.id,m1_0.created_at,m1_0.name from member m1_0 where m1_0.id=?
Hibernate: update orders set created_at=?,member_id=?,order_status=?,quantity=?,total_price=? where id=?
Hibernate: insert into orders (created_at,member_id,order_status,quantity,total_price,id) values (?,?,?,?,?,default)
Hibernate: update product set created_at=?,description=?,name=?,price=?,quantity=? where id=?
Hibernate: select m1_0.id,m1_0.created_at,m1_0.name from member m1_0 where m1_0.id=?
Hibernate: insert into order_item (created_at,order_id,price,product_id,quantity,id) values (?,?,?,?,?,default)
Hibernate: insert into orders (created_at,member_id,order_status,quantity,total_price,id) values (?,?,?,?,?,default)
Hibernate: update orders set created_at=?,member_id=?,order_status=?,quantity=?,total_price=? where id=?
Hibernate: select p1_0.id,p1_0.created_at,p1_0.description,p1_0.name,p1_0.price,p1_0.quantity from product p1_0 where p1_0.id=? for update
Hibernate: update product set created_at=?,description=?,name=?,price=?,quantity=? where id=?
Hibernate: select p1_0.id,p1_0.created_at,p1_0.description,p1_0.name,p1_0.price,p1_0.quantity from product p1_0 where p1_0.id=? for update
Hibernate: insert into order_item (created_at,order_id,price,product_id,quantity,id) values (?,?,?,?,?,default)
Hibernate: update orders set created_at=?,member_id=?,order_status=?,quantity=?,total_price=? where id=?
Hibernate: update product set created_at=?,description=?,name=?,price=?,quantity=? where id=?
Hibernate: insert into order_item (created_at,order_id,price,product_id,quantity,id) values (?,?,?,?,?,default)
Hibernate: update orders set created_at=?,member_id=?,order_status=?,quantity=?,total_price=? where id=?
Hibernate: update product set created_at=?,description=?,name=?,price=?,quantity=? where id=?
Hibernate: insert into order_item (created_at,order_id,price,product_id,quantity,id) values (?,?,?,?,?,default)
Hibernate: update orders set created_at=?,member_id=?,order_status=?,quantity=?,total_price=? where id=?
Hibernate: update product set created_at=?,description=?,name=?,price=?,quantity=? where id=?
Hibernate: insert into order_item (created_at,order_id,price,product_id,quantity,id) values (?,?,?,?,?,default)
Hibernate: update orders set created_at=?,member_id=?,order_status=?,quantity=?,total_price=? where id=?
Hibernate: update product set created_at=?,description=?,name=?,price=?,quantity=? where id=?
Hibernate: insert into order_item (created_at,order_id,price,product_id,quantity,id) values (?,?,?,?,?,default)
Hibernate: update orders set created_at=?,member_id=?,order_status=?,quantity=?,total_price=? where id=?
Hibernate: update product set created_at=?,description=?,name=?,price=?,quantity=? where id=?
Hibernate: insert into order_item (created_at,order_id,price,product_id,quantity,id) values (?,?,?,?,?,default)
Hibernate: update orders set created_at=?,member_id=?,order_status=?,quantity=?,total_price=? where id=?
Hibernate: update product set created_at=?,description=?,name=?,price=?,quantity=? where id=?
Hibernate: insert into order_item (created_at,order_id,price,product_id,quantity,id) values (?,?,?,?,?,default)
Hibernate: update orders set created_at=?,member_id=?,order_status=?,quantity=?,total_price=? where id=?
Hibernate: update product set created_at=?,description=?,name=?,price=?,quantity=? where id=?
Hibernate: select p1_0.id,p1_0.created_at,p1_0.description,p1_0.name,p1_0.price,p1_0.quantity from product p1_0 where p1_0.id=?
Hibernate: select m1_0.id,m1_0.created_at,m1_0.name from member m1_0 where m1_0.id=?
Hibernate: insert into orders (created_at,member_id,order_status,quantity,total_price,id) values (?,?,?,?,?,default)
Hibernate: select p1_0.id,p1_0.created_at,p1_0.description,p1_0.name,p1_0.price,p1_0.quantity from product p1_0 where p1_0.id=? for update
]]></system-out>
  <system-err><![CDATA[Mockito is currently self-attaching to enable the inline-mock-maker. This will no longer work in future releases of the JDK. Please add Mockito as an agent to your build as described in Mockito's documentation: https://javadoc.io/doc/org.mockito/mockito-core/latest/org.mockito/org/mockito/Mockito.html#0.3
WARNING: A Java agent has been loaded dynamically (C:\Users\E-trons\.gradle\caches\modules-2\files-2.1\net.bytebuddy\byte-buddy-agent\1.17.5\58f9507f5f28d1d3e7adfb4ec2fe37c29d332c9b\byte-buddy-agent-1.17.5.jar)
WARNING: If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide this warning
WARNING: If a serviceability tool is not in use, please run with -Djdk.instrument.traceUsage for more information
WARNING: Dynamic loading of agents will be disallowed by default in a future release
]]></system-err>
</testsuite>
